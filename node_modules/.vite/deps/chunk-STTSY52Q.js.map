{
  "version": 3,
  "sources": ["../../meshline/dist/index.js"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __publicField = (obj, key, value) => {\r\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\r\n  return value;\r\n};\r\nimport * as THREE from \"three\";\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  let i;\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++)\r\n      dst[i + dstOffset] = src[i];\r\n  }\r\n  return dst;\r\n}\r\nfunction convertPoints(points) {\r\n  if (points instanceof Float32Array)\r\n    return points;\r\n  if (points instanceof THREE.BufferGeometry)\r\n    return points.getAttribute(\"position\").array;\r\n  return points.map((p) => {\r\n    const isArray = Array.isArray(p);\r\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\r\n  }).flat();\r\n}\r\nclass MeshLineGeometry extends THREE.BufferGeometry {\r\n  constructor() {\r\n    super();\r\n    __publicField(this, \"type\", \"MeshLine\");\r\n    __publicField(this, \"isMeshLine\", true);\r\n    __publicField(this, \"positions\", []);\r\n    __publicField(this, \"previous\", []);\r\n    __publicField(this, \"next\", []);\r\n    __publicField(this, \"side\", []);\r\n    __publicField(this, \"width\", []);\r\n    __publicField(this, \"indices_array\", []);\r\n    __publicField(this, \"uvs\", []);\r\n    __publicField(this, \"counters\", []);\r\n    __publicField(this, \"widthCallback\", null);\r\n    __publicField(this, \"_attributes\");\r\n    __publicField(this, \"_points\", []);\r\n    __publicField(this, \"points\");\r\n    __publicField(this, \"matrixWorld\", new THREE.Matrix4());\r\n    Object.defineProperties(this, {\r\n      points: {\r\n        enumerable: true,\r\n        get() {\r\n          return this._points;\r\n        },\r\n        set(value) {\r\n          this.setPoints(value, this.widthCallback);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  setMatrixWorld(matrixWorld) {\r\n    this.matrixWorld = matrixWorld;\r\n  }\r\n  setPoints(points, wcb) {\r\n    points = convertPoints(points);\r\n    this._points = points;\r\n    this.widthCallback = wcb != null ? wcb : null;\r\n    this.positions = [];\r\n    this.counters = [];\r\n    if (points.length && points[0] instanceof THREE.Vector3) {\r\n      for (let j = 0; j < points.length; j++) {\r\n        const p = points[j];\r\n        const c = j / (points.length - 1);\r\n        this.positions.push(p.x, p.y, p.z);\r\n        this.positions.push(p.x, p.y, p.z);\r\n        this.counters.push(c);\r\n        this.counters.push(c);\r\n      }\r\n    } else {\r\n      for (let j = 0; j < points.length; j += 3) {\r\n        const c = j / (points.length - 1);\r\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\r\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\r\n        this.counters.push(c);\r\n        this.counters.push(c);\r\n      }\r\n    }\r\n    this.process();\r\n  }\r\n  compareV3(a, b) {\r\n    const aa = a * 6;\r\n    const ab = b * 6;\r\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\r\n  }\r\n  copyV3(a) {\r\n    const aa = a * 6;\r\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n  }\r\n  process() {\r\n    const l = this.positions.length / 6;\r\n    this.previous = [];\r\n    this.next = [];\r\n    this.side = [];\r\n    this.width = [];\r\n    this.indices_array = [];\r\n    this.uvs = [];\r\n    let w;\r\n    let v;\r\n    if (this.compareV3(0, l - 1)) {\r\n      v = this.copyV3(l - 2);\r\n    } else {\r\n      v = this.copyV3(0);\r\n    }\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    this.previous.push(v[0], v[1], v[2]);\r\n    for (let j = 0; j < l; j++) {\r\n      this.side.push(1);\r\n      this.side.push(-1);\r\n      if (this.widthCallback)\r\n        w = this.widthCallback(j / (l - 1));\r\n      else\r\n        w = 1;\r\n      this.width.push(w);\r\n      this.width.push(w);\r\n      this.uvs.push(j / (l - 1), 0);\r\n      this.uvs.push(j / (l - 1), 1);\r\n      if (j < l - 1) {\r\n        v = this.copyV3(j);\r\n        this.previous.push(v[0], v[1], v[2]);\r\n        this.previous.push(v[0], v[1], v[2]);\r\n        const n = j * 2;\r\n        this.indices_array.push(n, n + 1, n + 2);\r\n        this.indices_array.push(n + 2, n + 1, n + 3);\r\n      }\r\n      if (j > 0) {\r\n        v = this.copyV3(j);\r\n        this.next.push(v[0], v[1], v[2]);\r\n        this.next.push(v[0], v[1], v[2]);\r\n      }\r\n    }\r\n    if (this.compareV3(l - 1, 0)) {\r\n      v = this.copyV3(1);\r\n    } else {\r\n      v = this.copyV3(l - 1);\r\n    }\r\n    this.next.push(v[0], v[1], v[2]);\r\n    this.next.push(v[0], v[1], v[2]);\r\n    if (!this._attributes || this._attributes.position.count !== this.counters.length) {\r\n      this._attributes = {\r\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\r\n      };\r\n    } else {\r\n      this._attributes.position.copyArray(new Float32Array(this.positions));\r\n      this._attributes.position.needsUpdate = true;\r\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\r\n      this._attributes.previous.needsUpdate = true;\r\n      this._attributes.next.copyArray(new Float32Array(this.next));\r\n      this._attributes.next.needsUpdate = true;\r\n      this._attributes.side.copyArray(new Float32Array(this.side));\r\n      this._attributes.side.needsUpdate = true;\r\n      this._attributes.width.copyArray(new Float32Array(this.width));\r\n      this._attributes.width.needsUpdate = true;\r\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\r\n      this._attributes.uv.needsUpdate = true;\r\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n      this._attributes.index.needsUpdate = true;\r\n    }\r\n    this.setAttribute(\"position\", this._attributes.position);\r\n    this.setAttribute(\"previous\", this._attributes.previous);\r\n    this.setAttribute(\"next\", this._attributes.next);\r\n    this.setAttribute(\"side\", this._attributes.side);\r\n    this.setAttribute(\"width\", this._attributes.width);\r\n    this.setAttribute(\"uv\", this._attributes.uv);\r\n    this.setAttribute(\"counters\", this._attributes.counters);\r\n    this.setAttribute(\"position\", this._attributes.position);\r\n    this.setAttribute(\"previous\", this._attributes.previous);\r\n    this.setAttribute(\"next\", this._attributes.next);\r\n    this.setAttribute(\"side\", this._attributes.side);\r\n    this.setAttribute(\"width\", this._attributes.width);\r\n    this.setAttribute(\"uv\", this._attributes.uv);\r\n    this.setAttribute(\"counters\", this._attributes.counters);\r\n    this.setIndex(this._attributes.index);\r\n    this.computeBoundingSphere();\r\n    this.computeBoundingBox();\r\n  }\r\n  advance({ x, y, z }) {\r\n    const positions = this._attributes.position.array;\r\n    const previous = this._attributes.previous.array;\r\n    const next = this._attributes.next.array;\r\n    const l = positions.length;\r\n    memcpy(positions, 0, previous, 0, l);\r\n    memcpy(positions, 6, positions, 0, l - 6);\r\n    positions[l - 6] = x;\r\n    positions[l - 5] = y;\r\n    positions[l - 4] = z;\r\n    positions[l - 3] = x;\r\n    positions[l - 2] = y;\r\n    positions[l - 1] = z;\r\n    memcpy(positions, 6, next, 0, l - 6);\r\n    next[l - 6] = x;\r\n    next[l - 5] = y;\r\n    next[l - 4] = z;\r\n    next[l - 3] = x;\r\n    next[l - 2] = y;\r\n    next[l - 1] = z;\r\n    this._attributes.position.needsUpdate = true;\r\n    this._attributes.previous.needsUpdate = true;\r\n    this._attributes.next.needsUpdate = true;\r\n  }\r\n}\r\nconst vertexShader = `\r\n  #include <common>\r\n  #include <logdepthbuf_pars_vertex>\r\n  #include <fog_pars_vertex>\r\n  #include <clipping_planes_pars_vertex>\r\n\r\n  attribute vec3 previous;\r\n  attribute vec3 next;\r\n  attribute float side;\r\n  attribute float width;\r\n  attribute float counters;\r\n  \r\n  uniform vec2 resolution;\r\n  uniform float lineWidth;\r\n  uniform vec3 color;\r\n  uniform float opacity;\r\n  uniform float sizeAttenuation;\r\n  \r\n  varying vec2 vUV;\r\n  varying vec4 vColor;\r\n  varying float vCounters;\r\n  \r\n  vec2 fix(vec4 i, float aspect) {\r\n    vec2 res = i.xy / i.w;\r\n    res.x *= aspect;\r\n    return res;\r\n  }\r\n  \r\n  void main() {\r\n    float aspect = resolution.x / resolution.y;\r\n    vColor = vec4(color, opacity);\r\n    vUV = uv;\r\n    vCounters = counters;\r\n  \r\n    mat4 m = projectionMatrix * modelViewMatrix;\r\n    vec4 finalPosition = m * vec4(position, 1.0) * aspect;\r\n    vec4 prevPos = m * vec4(previous, 1.0);\r\n    vec4 nextPos = m * vec4(next, 1.0);\r\n  \r\n    vec2 currentP = fix(finalPosition, aspect);\r\n    vec2 prevP = fix(prevPos, aspect);\r\n    vec2 nextP = fix(nextPos, aspect);\r\n  \r\n    float w = lineWidth * width;\r\n  \r\n    vec2 dir;\r\n    if (nextP == currentP) dir = normalize(currentP - prevP);\r\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\r\n    else {\r\n      vec2 dir1 = normalize(currentP - prevP);\r\n      vec2 dir2 = normalize(nextP - currentP);\r\n      dir = normalize(dir1 + dir2);\r\n  \r\n      vec2 perp = vec2(-dir1.y, dir1.x);\r\n      vec2 miter = vec2(-dir.y, dir.x);\r\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\r\n    }\r\n  \r\n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\r\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\r\n    normal.xy *= .5 * w;\r\n    //normal *= projectionMatrix;\r\n    if (sizeAttenuation == 0.) {\r\n      normal.xy *= finalPosition.w;\r\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy * aspect;\r\n    }\r\n  \r\n    finalPosition.xy += normal.xy * side;\r\n    gl_Position = finalPosition;\r\n    #include <logdepthbuf_vertex>\r\n    #include <fog_vertex>\r\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n    #include <clipping_planes_vertex>\r\n    #include <fog_vertex>\r\n  }\r\n`;\r\nconst version = /* @__PURE__ */ (() => parseInt(THREE.REVISION.replace(/\\D+/g, \"\")))();\r\nconst colorspace_fragment = version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\";\r\nconst fragmentShader = `\r\n  #include <fog_pars_fragment>\r\n  #include <logdepthbuf_pars_fragment>\r\n  #include <clipping_planes_pars_fragment>\r\n  \r\n  uniform sampler2D map;\r\n  uniform sampler2D alphaMap;\r\n  uniform float useGradient;\r\n  uniform float useMap;\r\n  uniform float useAlphaMap;\r\n  uniform float useDash;\r\n  uniform float dashArray;\r\n  uniform float dashOffset;\r\n  uniform float dashRatio;\r\n  uniform float visibility;\r\n  uniform float alphaTest;\r\n  uniform vec2 repeat;\r\n  uniform vec3 gradient[2];\r\n  \r\n  varying vec2 vUV;\r\n  varying vec4 vColor;\r\n  varying float vCounters;\r\n  \r\n  void main() {\r\n    #include <logdepthbuf_fragment>\r\n    vec4 diffuseColor = vColor;\r\n    if (useGradient == 1.) diffuseColor = vec4(mix(gradient[0], gradient[1], vCounters), 1.0);\r\n    if (useMap == 1.) diffuseColor *= texture2D(map, vUV * repeat);\r\n    if (useAlphaMap == 1.) diffuseColor.a *= texture2D(alphaMap, vUV * repeat).a;\r\n    if (diffuseColor.a < alphaTest) discard;\r\n    if (useDash == 1.) diffuseColor.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\r\n    diffuseColor.a *= step(vCounters, visibility);\r\n    #include <clipping_planes_fragment>\r\n    gl_FragColor = diffuseColor;     \r\n    #include <fog_fragment>\r\n    #include <tonemapping_fragment>\r\n    #include <${colorspace_fragment}>\r\n  }\r\n`;\r\nclass MeshLineMaterial extends THREE.ShaderMaterial {\r\n  constructor(parameters) {\r\n    super({\r\n      uniforms: {\r\n        ...THREE.UniformsLib.fog,\r\n        lineWidth: { value: 1 },\r\n        map: { value: null },\r\n        useMap: { value: 0 },\r\n        alphaMap: { value: null },\r\n        useAlphaMap: { value: 0 },\r\n        color: { value: new THREE.Color(16777215) },\r\n        gradient: { value: [new THREE.Color(16711680), new THREE.Color(65280)] },\r\n        opacity: { value: 1 },\r\n        resolution: { value: new THREE.Vector2(1, 1) },\r\n        sizeAttenuation: { value: 1 },\r\n        dashArray: { value: 0 },\r\n        dashOffset: { value: 0 },\r\n        dashRatio: { value: 0.5 },\r\n        useDash: { value: 0 },\r\n        useGradient: { value: 0 },\r\n        visibility: { value: 1 },\r\n        alphaTest: { value: 0 },\r\n        repeat: { value: new THREE.Vector2(1, 1) }\r\n      },\r\n      vertexShader,\r\n      fragmentShader\r\n    });\r\n    __publicField(this, \"lineWidth\");\r\n    __publicField(this, \"map\");\r\n    __publicField(this, \"useMap\");\r\n    __publicField(this, \"alphaMap\");\r\n    __publicField(this, \"useAlphaMap\");\r\n    __publicField(this, \"color\");\r\n    __publicField(this, \"gradient\");\r\n    __publicField(this, \"resolution\");\r\n    __publicField(this, \"sizeAttenuation\");\r\n    __publicField(this, \"dashArray\");\r\n    __publicField(this, \"dashOffset\");\r\n    __publicField(this, \"dashRatio\");\r\n    __publicField(this, \"useDash\");\r\n    __publicField(this, \"useGradient\");\r\n    __publicField(this, \"visibility\");\r\n    __publicField(this, \"repeat\");\r\n    this.type = \"MeshLineMaterial\";\r\n    Object.defineProperties(this, {\r\n      lineWidth: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.lineWidth.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.lineWidth.value = value;\r\n        }\r\n      },\r\n      map: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.map.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.map.value = value;\r\n        }\r\n      },\r\n      useMap: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.useMap.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.useMap.value = value;\r\n        }\r\n      },\r\n      alphaMap: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.alphaMap.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.alphaMap.value = value;\r\n        }\r\n      },\r\n      useAlphaMap: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.useAlphaMap.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.useAlphaMap.value = value;\r\n        }\r\n      },\r\n      color: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.color.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.color.value = value;\r\n        }\r\n      },\r\n      gradient: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.gradient.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.gradient.value = value;\r\n        }\r\n      },\r\n      opacity: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.opacity.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.opacity.value = value;\r\n        }\r\n      },\r\n      resolution: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.resolution.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.resolution.value.copy(value);\r\n        }\r\n      },\r\n      sizeAttenuation: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.sizeAttenuation.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.sizeAttenuation.value = value;\r\n        }\r\n      },\r\n      dashArray: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.dashArray.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.dashArray.value = value;\r\n          this.useDash = value !== 0 ? 1 : 0;\r\n        }\r\n      },\r\n      dashOffset: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.dashOffset.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.dashOffset.value = value;\r\n        }\r\n      },\r\n      dashRatio: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.dashRatio.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.dashRatio.value = value;\r\n        }\r\n      },\r\n      useDash: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.useDash.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.useDash.value = value;\r\n        }\r\n      },\r\n      useGradient: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.useGradient.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.useGradient.value = value;\r\n        }\r\n      },\r\n      visibility: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.visibility.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.visibility.value = value;\r\n        }\r\n      },\r\n      alphaTest: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.alphaTest.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.alphaTest.value = value;\r\n        }\r\n      },\r\n      repeat: {\r\n        enumerable: true,\r\n        get() {\r\n          return this.uniforms.repeat.value;\r\n        },\r\n        set(value) {\r\n          this.uniforms.repeat.value.copy(value);\r\n        }\r\n      }\r\n    });\r\n    this.setValues(parameters);\r\n  }\r\n  copy(source) {\r\n    super.copy(source);\r\n    this.lineWidth = source.lineWidth;\r\n    this.map = source.map;\r\n    this.useMap = source.useMap;\r\n    this.alphaMap = source.alphaMap;\r\n    this.useAlphaMap = source.useAlphaMap;\r\n    this.color.copy(source.color);\r\n    this.gradient = source.gradient;\r\n    this.opacity = source.opacity;\r\n    this.resolution.copy(source.resolution);\r\n    this.sizeAttenuation = source.sizeAttenuation;\r\n    this.dashArray = source.dashArray;\r\n    this.dashOffset = source.dashOffset;\r\n    this.dashRatio = source.dashRatio;\r\n    this.useDash = source.useDash;\r\n    this.useGradient = source.useGradient;\r\n    this.visibility = source.visibility;\r\n    this.alphaTest = source.alphaTest;\r\n    this.repeat.copy(source.repeat);\r\n    return this;\r\n  }\r\n}\r\nfunction raycast(raycaster, intersects) {\r\n  const inverseMatrix = new THREE.Matrix4();\r\n  const ray = new THREE.Ray();\r\n  const sphere = new THREE.Sphere();\r\n  const interRay = new THREE.Vector3();\r\n  const geometry = this.geometry;\r\n  sphere.copy(geometry.boundingSphere);\r\n  sphere.applyMatrix4(this.matrixWorld);\r\n  if (!raycaster.ray.intersectSphere(sphere, interRay))\r\n    return;\r\n  inverseMatrix.copy(this.matrixWorld).invert();\r\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\r\n  const vStart = new THREE.Vector3();\r\n  const vEnd = new THREE.Vector3();\r\n  const interSegment = new THREE.Vector3();\r\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\r\n  const index = geometry.index;\r\n  const attributes = geometry.attributes;\r\n  if (index !== null) {\r\n    const indices = index.array;\r\n    const positions = attributes.position.array;\r\n    const widths = attributes.width.array;\r\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\r\n      const a = indices[i];\r\n      const b = indices[i + 1];\r\n      vStart.fromArray(positions, a * 3);\r\n      vEnd.fromArray(positions, b * 3);\r\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\r\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\r\n      const precisionSq = precision * precision;\r\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\r\n      if (distSq > precisionSq)\r\n        continue;\r\n      interRay.applyMatrix4(this.matrixWorld);\r\n      const distance = raycaster.ray.origin.distanceTo(interRay);\r\n      if (distance < raycaster.near || distance > raycaster.far)\r\n        continue;\r\n      intersects.push({\r\n        distance,\r\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\r\n        index: i,\r\n        face: null,\r\n        faceIndex: void 0,\r\n        object: this\r\n      });\r\n      i = l;\r\n    }\r\n  }\r\n}\r\nexport {\r\n  MeshLineGeometry,\r\n  MeshLineMaterial,\r\n  raycast\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
